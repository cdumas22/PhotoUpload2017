@{
    ViewData["Title"] = "Photo Cropper";
}

@model PhotoUpload.ViewModels.IndexViewModel
<h1>Photo Cropper Demo</h1>
<form asp-action="@nameof(PhotoUpload.Controllers.HomeController.Index)" method="post" role="form">
    <div id="photo-uploads" class="col-md-6"></div>
    <div id="photo-uploads2" class="col-md-6"></div>
    <input type="submit" value="Submit" />
</form>

@section scripts {
    @*your custom initialization of all the photo uploaders*@
    <script>
        $(function () {
            //the PhotoCropper will be appended to the element. it will not replace the content
            $('#photo-uploads').PhotoCropper({
                inputName: '@Html.NameFor(x => x.ImageDataUrl)',
                photoUrl: '@Model.ImageDataUrl',
                maxWidth: 300,
                cropperOptions: {
                    aspectRatio: 16 / 9
                },
                onDelete: function (options) {
                    console.log(options);
                    //demo wait 10 seconds then readd the widget
                    setTimeout(function () {
                        $('#photo-uploads').PhotoCropper(options);
                    }, 10000);

                }
            });
            $('#photo-uploads').PhotoCropper();
        });
    </script>

    @*PhotoCropper plugin*@
    <script src="~/lib/cropperjs/dist/cropper.js"></script>
    <link href="~/lib/cropperjs/dist/cropper.css" rel="stylesheet">
    <style type="text/css">
        .photo-cropper .photo-preview {
            width: 100%;
            height: 100%;
        }

        .photo-cropper .dropZone {
            cursor: pointer;
            border: dashed 3px darkgray;
            border-radius: 10px;
            padding: 30px;
            margin: 20px;
            display: block;
        }
    </style>
    <script type="text/template" id="photo-upload-cropper-template">
        <div class="panel panel-default photo-cropper">
            <div class="panel-heading">
                <div class="btn-group btn-group-sm pull-right">
                    <button type="button" class="reset btn btn-default" style="display:none;" name="Reset">
                        <i class="fa fa-times"></i>
                    </button>
                    <button type="button" class="accept-crop btn btn-default" style="display:none;" name="Crop">
                        <i class="fa fa-check text-success"></i>
                    </button>
                    <button type="button" class="recrop btn btn-default" style="display:none;" name="Recrop">
                        <i class="fa fa-crop"></i>
                    </button>
                </div>
                <button type="button" class="remove btn btn-default btn-sm" name="Remove">
                    <i class="fa fa-trash text-danger"></i>
                </button>
                <div class="clearfix"></div>
            </div>
            <div class="upload-body">
                <div class="photo-preview text-center" style="display:none;">
                    <img class="cropper-image" src="" />
                </div>
                <div class="loading text-center panel-body" style="display:none;">
                    <i class="fa fa-circle-o-notch fa-spin fa-3x fa-fw"></i>
                </div>
                <div class="upload-photo">
                    <label class="btn-file dropZone">
                        <h3 class="text-center">
                            <i class="fa fa-upload"></i>
                            <span class="text-uppercase">
                                <span class="uploaderText">Drag an image here</span>
                            </span>
                            <small class="uploaderSubText">or click to <u>browse your computer...</u></small>
                        </h3>
                        <input class="photo-input"
                               style="display: none"
                               type="file"
                               accept="image/*"
                               onchange="photoCropper.photoSelected($(this).parents('.photo-cropper'), this.files[0])">
                        @*this is the input that will be posted on form submit*@
                        <input class="photo-data" type="hidden" />
                    </label>
                </div>
            </div>
        </div>
    </script>

    <script>
        (function ($, photoCropper) {
            /*public methods*/

            //jquery extension for initializing a cropper with jquery
            //you can get to the instance that was created by doing $(el).data('photoCropper')
            //this will give all instances of the croppers created on this element
            $.fn.PhotoCropper = function (options) {
                options || (options = {});

                var _this = this,
                    cropper,
                    croppersForElement = this.data('photoCropper') || [],
                    onDelete = options.onDelete;

                options.appendTo = this;
                options.onDelete = function (options) {
                    //remove the data from the element
                    var removedCropper = croppersForElement.splice(croppersForElement.indexOf(cropper), 1);

                    if (croppersForElement.length) {
                        _this.data('photoCropper', croppersForElement);
                    }
                    else {
                        _this.removeData('photoCropper');
                    }

                    options.onDelete = onDelete;

                    if (typeof onDelete === 'function') {
                        onDelete(options);
                    }
                };

                cropper = photoCropper.createCropper(options);

                croppersForElement.push(cropper);

                this.data('photoCropper', croppersForElement);

                return this;
            };

            //factory for creating cropper
            /* options
                *inputName - string - if none is provided it will use a guid
                *appendTo - selector/element - if none is provided it will not add it to the page. you can manually add it to the page with the instance.container
                *photoUrl - string (url or base64 image data)
                *maxWidth - int - the max width in pixels you want the image to use
                *cssClass - string -a custom class you want on the cropper instance
                *onDelete - function(options) - callback for when the user deletes the widget has the options that were used to initialize the widget
                *cropperOptions - object - additional options you want for the cropperjs library
            */
            photoCropper.createCropper = function (options) {
                var photoCropper = new PhotoCropper(options);

                photoCropper.container.appendTo(options.appendTo);
                return photoCropper;
            };
             //this is a public method that can be called from the input
            photoCropper.photoSelected = function (parent, file) {
                var cropper = croppers.find(function (x) {
                    return x.container[0] === parent[0];
                });

                cropper.photoSelected(file);
            };

            /*private variables*/
            var template = $('#photo-upload-cropper-template').html();
            var croppers = [];
            var defaultOptions = {
                zoomable: false
            };
            /*Private methods*/

            //private class for Photo Croppers
            function PhotoCropper(options) {
                //create the template
                var uploadTemplate = $(template).clone().addClass(options.cssClass);
                this.options = options;
                this.container = uploadTemplate;
                this.maxWidth = options.maxWidth || 'calc(100%)';
                this.cropperOptions = options.cropperOptions;
                //make sure the inputs have a unique name
                this.uniqueName = options.inputName || 'photo-' + guid();

                //initialize all the buttons
                this.setNameForInput(this.uniqueName)
                    .initializeEvents()
                    .initImage(options.photoUrl);

                //save reference of all croppers created
                croppers.push(this);

                return this;
            }

            PhotoCropper.prototype = {
                Events: {
                    CropAccept: 'crop-accept',
                    Recrop: 'recrop',
                    Upload: 'upload',
                    Delete: 'delete',
                    Loading: 'loading',
                    Reset: 'reset'
                },
                setNameForInput: function (name) {
                    this.container.find('label').attr('for', name);
                    this.container.find('input.photo-input').attr('id', name);
                    this.container.find('input.photo-data').attr('name', name);
                    return this;
                },
                initializeEvents: function () {
                    var _this = this;
                    //add actions
                    this.container.find('.reset').click(call(this.reset));
                    this.container.find('.remove').click(call(this.remove));
                    this.container.find('.accept-crop').click(call(this.crop));
                    this.container.find('.recrop').click(call(this.recrop));

                    // Initialize drop zone.
                    this.container.find('.dropZone')
                        .on('dragover', stop)
                        .on('dragenter', stop)
                        .on('drop', function (e) {
                            if (e.originalEvent.dataTransfer && e.originalEvent.dataTransfer.files.length) {
                                stop(e);
                                _this.photoSelected(e.originalEvent.dataTransfer.files[0]);
                            }
                        });

                    return this;

                    function stop(e) {
                        e.preventDefault();
                        e.stopPropagation();

                    }
                    function call(method) {
                        return function () {
                            method.apply(_this, arguments);
                        };
                    }
                },
                trigger: function (event) {
                    var showUpload = showReset = showDelete = showAccept = showCrop = showPreview = showLoading = false;

                    switch (event) {
                        case this.Events.Loading:
                            showLoading = true;
                            break;
                        case this.Events.Reset:
                            showUpload = true;
                            break;
                        case this.Events.CropAccept:
                            showReset = showCrop = showPreview = true;
                            break;
                        case this.Events.Recrop:
                            showAccept = showReset = showPreview = true;
                            break;
                        case this.Events.Upload:
                            showReset = showAccept = showPreview = true;
                            break;
                    }

                    //set the image
                    this.container.find('.cropper-image').attr('src', this.dataUrl).css({ maxWidth: this.maxWidth });
                    this.container.find('.photo-data').val(this.dataUrl);
                    //show elements
                    this.container.find('.loading').toggle(showLoading);
                    this.container.find('.upload-photo').toggle(showUpload);
                    this.container.find('.photo-preview').toggle(showPreview);
                    this.container.find('.reset').toggle(showReset);
                    this.container.find('.accept-crop').toggle(showAccept);
                    this.container.find('.recrop').toggle(showCrop);

                    return this;
                },
                photoSelected: function (file) {
                    var _this = this;
                    //make sure they selected the correct image type
                    if (file && /^image\/\w+/.test(file.type)) {
                        //get the correct upload on the page
                        var reader = new FileReader();
                        this.trigger(this.Events.Loading);
                        this.type = file.type;
                        reader.onload = function (e) {
                            _this
                                .initImage.call(_this, e.target.result)
                                .trigger(_this.Events.Upload)
                                .initCropper();
                        };
                        reader.readAsDataURL(file);
                    }
                    else if (file) {
                        alert('Please Upload an image.');
                    }

                    return this;
                },
                remove: function () {
                    this.container.remove();

                    if (typeof this.options.onDelete === 'function') {
                        this.options.onDelete(this.options);
                    }

                    this.stop().trigger(this.Events.Delete);

                    return this;
                },
                reset: function () {
                    this.dataUrl = null;
                    this.data = null;
                    this.stop().trigger(this.Events.Reset);

                    return this;
                },
                crop: function () {
                    this.originalUrl = this.dataUrl;
                    this.data = this.cropper.getData();
                    this.dataUrl = this.cropper.getCroppedCanvas(this.type === 'image/png' ? null : {
                        fillColor: '#fff'
                    }).toDataURL(this.type);

                    this.stop();

                    this.trigger(this.Events.CropAccept);
                },
                recrop: function () {
                    if (!this.cropper) {
                        this.dataUrl = !!this.originalUrl ? this.originalUrl : this.dataUrl;
                        this.originalUrl = '';

                        this.trigger(this.Events.Recrop).initCropper();
                    }

                    return this;
                },
                stop: function () {
                    if (this.cropper) {
                        this.cropper.destroy();
                        this.cropper = null;
                    }

                    return this;
                },
                initCropper: function () {
                    var _this = this;
                    var options = $.extend({}, defaultOptions, this.cropperOptions || {});
                    //create a new cropper with the options
                    this.cropper = new Cropper(this.container.find('.cropper-image')[0], options);

                    //if we have a current crop zone lets apply it when we start cropping again.
                    if (this.data) {
                        this.cropper.setData(this.data);
                    }

                    return this;
                },
                initImage: function (dataUrl) {
                    if (dataUrl) {
                        this.dataUrl = dataUrl;
                        this.trigger(this.Events.CropAccept);
                    }

                    return this;
                }
            };
           
            function guid() {
                function s4() {
                    return Math.floor((1 + Math.random()) * 0x10000)
                        .toString(16)
                        .substring(1);
                }
                return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
                    s4() + '-' + s4() + s4() + s4();
            }
        })(jQuery, window.photoCropper = window.photoCropper || {});
    </script>
}